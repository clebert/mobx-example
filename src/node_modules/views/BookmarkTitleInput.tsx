import {bookmarkActionsType} from 'actions/bookmarkActions';
import {observer} from 'mobx-react';
import {BookmarkModel} from 'models/BookmarkModel';
import {BookmarkViewModel} from 'models/BookmarkViewModel';
import * as React from 'react';

export interface PropsType {
  bookmark: BookmarkModel;
  bookmarkActions: bookmarkActionsType;
  bookmarkView: BookmarkViewModel;
}

@observer
export class BookmarkTitleInput extends React.Component<PropsType, {}> {
  private inputElement: HTMLInputElement;

  public constructor() {
    super();

    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleRef = this.handleRef.bind(this);
  }

  public get value(): string {
    const {inputElement} = this;

    return inputElement ? inputElement.value : this.props.bookmark.title;
  }

  public render(): JSX.Element {
    const {bookmark, bookmarkView} = this.props;

    return (
      <input
        defaultValue={bookmark.title}
        onKeyDown={this.handleKeyDown}
        placeholder="Title"
        ref={this.handleRef}
        size={bookmarkView.inputElementSize}
        type="text"
      />
    );
  }

  private handleKeyDown(event: React.KeyboardEvent): void {
    const {bookmark, bookmarkActions, bookmarkView} = this.props;
    const {cancelEditing, endEditing} = bookmarkActions;

    switch (event.key) {
      case 'Enter': return endEditing(bookmark, bookmarkView, this.value);
      case 'Escape': return cancelEditing(bookmark, bookmarkView);
      default:
    }
  }

  private handleRef(inputElement: HTMLInputElement): void {
    this.inputElement = inputElement;

    if (inputElement) {
      inputElement.focus();
      inputElement.select();
    }
  }
}

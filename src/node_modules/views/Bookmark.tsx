import {bookmarkActionsType} from 'actions/bookmarkActions';
import {observer} from 'mobx-react';
import {BookmarkModel} from 'models/BookmarkModel';
import {BookmarkViewModel} from 'models/BookmarkViewModel';
import * as React from 'react';
import {BookmarkTitleInput} from 'views/BookmarkTitleInput';

export interface PropsType {
  bookmark: BookmarkModel;
  bookmarkActions: bookmarkActionsType;
  bookmarkView: BookmarkViewModel;
}

@observer
export class Bookmark extends React.Component<PropsType, {}> {
  private bookmarkTitleInputComponent: BookmarkTitleInput;

  public constructor() {
    super();

    this.handleCancelEditing = this.handleCancelEditing.bind(this);
    this.handleEndEditing = this.handleEndEditing.bind(this);
    this.handleStartEditing = this.handleStartEditing.bind(this);
    this.handleRef = this.handleRef.bind(this);
  }

  public render(): JSX.Element {
    const {bookmark, bookmarkView} = this.props;

    if (bookmarkView.editableBookmarks.has(bookmark.url)) {
      return this.renderEditableBookmark();
    }

    return this.renderNonEditableBookmark();
  }

  private handleCancelEditing(): void {
    const {bookmark, bookmarkActions, bookmarkView} = this.props;

    bookmarkActions.cancelEditing(bookmark, bookmarkView);
  }

  private handleEndEditing(): void {
    const {bookmark, bookmarkActions, bookmarkView} = this.props;
    const title = this.bookmarkTitleInputComponent.value;

    bookmarkActions.endEditing(bookmark, bookmarkView, title);
  }

  private handleStartEditing(): void {
    const {bookmark, bookmarkActions, bookmarkView} = this.props;

    bookmarkActions.startEditing(bookmark, bookmarkView);
  }

  private handleRef(bookmarkTitleInputComponent: BookmarkTitleInput): void {
    this.bookmarkTitleInputComponent = bookmarkTitleInputComponent;
  }

  private renderEditableBookmark(): JSX.Element {
    const {bookmark, bookmarkActions, bookmarkView} = this.props;

    return (
      <div>
        <BookmarkTitleInput
          bookmark={bookmark}
          bookmarkActions={bookmarkActions}
          bookmarkView={bookmarkView}
          ref={this.handleRef}
        />
        <button onClick={this.handleEndEditing}>Done</button>
        <button onClick={this.handleCancelEditing}>Cancel</button>
      </div>
    );
  }

  private renderNonEditableBookmark(): JSX.Element {
    const {bookmark} = this.props;

    return (
      <div>
        <a href={bookmark.url} target="_blank">{bookmark.title}</a>
        <button onClick={this.handleStartEditing}>Edit</button>
      </div>
    );
  }
}
